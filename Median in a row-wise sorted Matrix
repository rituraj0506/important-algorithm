Given a row wise sorted matrix of size R*C where R and C are always odd, find the median of the matrix.
Example 1:
Input:
R = 3, C = 3
M = [[1, 3, 5], 
     [2, 6, 9], 
     [3, 6, 9]]
Output: 5
Explanation: Sorting matrix elements gives 
us {1,2,3,3,5,6,6,9,9}. Hence, 5 is median. 

int median(vector<vector<int>> &matrix, int R, int C){
        // brute force
        int n=matrix.size();
        int m=matrix[0].size();
        vector<int>ans;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                ans.push_back(matrix[i][j]);
            }
        }
        int n1=ans.size();
        sort(ans.begin(),ans.end());
        return ans[n1/2];
    }
    
    optimal binary search
      t(c)=o(32*N*log2(m));
     s(c)=o(1);
     
         int smallthanmid(vector<int>&row ,int mid)
     {
         int l=0,h=row.size()-1;
         while(l<=h)
         {
             int md=l+(h-l)/2;
             if(row[md]<=mid)
             l=md+1;
             else
             h=md-1;
         }
         return l;
     }
    int median(vector<vector<int>> &matrix, int R, int C){
     int l=1;
     int h=1e9;
     int n=matrix.size();
     int m=matrix[0].size();
     while(l<=h)
     {
         int mid=l+(h-l)/2;
         int c=0;
         for(int i=0;i<n;i++)
         {
             c+=smallthanmid(matrix[i],mid); // write the fun which count the no of no which is <=mid
         }                                   // for every row
         // if count is lesser move right
         if(c<=(n*m)/2) l=mid+1;
         else
         h=mid-1;
     }
     return l; // answer was low 
     
   
    }
